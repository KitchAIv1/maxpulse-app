require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] ||= '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] ||= podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']
ENV['RCT_USE_RN_DEP'] ||= '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
ENV['RCT_USE_PREBUILT_RNCORE'] ||= '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'

prepare_react_native_project!

target 'MaxPulse' do
  use_expo_modules!
  
  # Enable modular headers for Firebase
  use_modular_headers!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )
    
    # Remove duplicate PrivacyInfo.xcprivacy file to prevent build conflicts
    privacy_file_path = File.join(installer.sandbox.root, '../MaxPulse/PrivacyInfo.xcprivacy')
    if File.exist?(privacy_file_path)
      File.delete(privacy_file_path)
      puts "ðŸ”¥ Removed duplicate PrivacyInfo.xcprivacy file from app folder"
    end
    
    # Remove PrivacyInfo from Xcode project to prevent duplicate copy
    project_path = File.join(installer.sandbox.root, '../MaxPulse.xcodeproj/project.pbxproj')
    if File.exist?(project_path)
      project_content = File.read(project_path)
      if project_content.include?('PrivacyInfo.xcprivacy')
        project_content.gsub!(/.*PrivacyInfo\.xcprivacy.*\n/, '')
        File.write(project_path, project_content)
        puts "ðŸ”¥ Removed PrivacyInfo.xcprivacy references from Xcode project"
      end
    end
  end
end
